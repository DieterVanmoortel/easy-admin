<?php


/**
 * TODO's
 * 
 * - use sprites for the images
 * - switch to ajax for backend actions
 * - smoother jquery
 * - develop some cool navigation system in jquery
 * - add caching
 * - finetune spinner action
 * 
 */

/**
 * Implements hook_init
 */
function admintabs_init(){
  global $language;
  $item = menu_get_item();
  if(!path_is_admin($item['path']) && user_access('use admintabs')){

    drupal_add_js(array('adminTabs' => array('modulePath' =>  drupal_get_path('module', 'admintabs'), 'lang' =>  $language->language)), 'setting');
    if(user_access('translate interface')){
      drupal_add_js(drupal_get_path('module', 'admintabs') . '/plugins/babylon/babylon.js');
    }
  }
}

/*
 * Implementing hook_permission
 */
function admintabs_permission(){
   return array(
    'use admintabs' => array(    // use the admin tabs
      'title' => t('Use Admin Tabs'),
      'description' => t('Use Admin Tabs in the frontend'),
    ),
    'configure admintabs' => array( // confiture the admin tabs
      'title' => t('Configure Admin Tabs'),
      'description' => t('Change settings for Admin tabs.'),
    ),
  );
}

/*
 *  Implementing hook_menu
 */
function admintabs_menu(){
  $items = array();
  $items['admin/config/admintabs/'] = array(
    'title' => t('Admin tabs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admintabs_settings_form'),
    'access arguments' => array('configure admintabs'),
    'file' => 'includes/admintabs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/*
 * Implementation of hook_block_info
 */
function admintabs_block_info() {
  $blocks = array();
  
  $blocks['admintabs'] = array(
    'info' => t('Admin Tabs'),
    'region' => 'content',
    'status' => 1,
    'propertiers' => array(
        'administrative' => FALSE,
    ),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function admintabs_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'admintabs':
      $block['content'] = admintabs_block_render();
      break;
  }
  return $block;
}
/**
 * Implements hook_theme().
 */
function admintabs_theme($existing, $type, $theme, $path) {
  return array(
    'parent_tab' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'admintabs') . '/theme',
      'file' => 'admintabs.theme.inc',
    ),
    'child_tab' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'admintabs') . '/theme',
      'file' => 'admintabs.theme.inc',
    ),
  );
}



/*
 * The content of the easy admin block
 */
function admintabs_block_render() {
  module_load_include('inc', 'admintabs', 'includes/admintabs.helpers');

  // don't even bother building this this block on admin pages
  // maybe make a setting out of this?
  $item = menu_get_item();
  if(path_is_admin($item['path'])){
    return '';
  }
  $output = '';
  
  // Primary & secondary actionstabs
  $primary = menu_primary_local_tasks();
  $secondary = menu_secondary_local_tasks();
  if(is_array($primary) || is_array($secondary)) {
    // unset the view tab ( which is pretty useless in our case
    foreach((array)$primary as $key => $value){
      if(isset($value['#link']['path']) && $value['#link']['path'] == 'node/%/view'){
        unset($primary[$key]);
      }
    }

    $output .= '<div class="tabs admintabs primary"><ul class="tabs primary">';
    $output .= drupal_render($primary);
    $output .= drupal_render($secondary);
    $output .= '</ul></div>';
  }
    // translation option
  $output .= '<div class="tabs admintabs translate"><span id="translate_link" class="icon"></span>';
  $translationlink = l(t('Translate'), 'translate', array('attributes' => array('process' => 'backend')));'<span id="translate_options"></span>';
  $output .= theme('item_list', array('items' => array($translationlink)));

  $output .= '</div>';


  $navitems = admintabs_default_navigation();
  $output .= '<div class="tabs admintabs nav">';
  $output .= implode('', $navitems);
  $output .= '</div>';
  
  $default_functions = admintabs_default_functions();
  $functions = theme('item_list', array('items' => $default_functions));
  $output .= '<div class="tabs admintabs tools"><span class="icon"></span>';
  $output .= $functions;
  $output .= '</div>';

  // spinner
  $output .= '<div id="adminspinner" class="tabs admintabs spinner"><span id="spinner-msg"></span></div>';
  return $output;
}
